{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#%%\n",
    "import pandas as pd\n",
    "import sqlalchemy\n",
    "from sqlalchemy import create_engine\n",
    "from flask import Flask\n",
    "\n",
    "#%%\n",
    "engine = create_engine('sqlite:///Resources/hawaii.sqlite')\n",
    "\n",
    "#%%\n",
    "app = Flask(__name__)\n",
    "\n",
    "#%%\n",
    "@app.route(\"/\")\n",
    "def welcome():\n",
    "    return (\n",
    "        f\"Welcome to the Hawaii Climate Analysis API!<br/>\"\n",
    "        f\"Available Routes:<br/>\"\n",
    "        f\"/api/v1.0/precipitation<br/>\"\n",
    "        f\"/api/v1.0/stations<br/>\"\n",
    "        f\"/api/v1.0/tobs<br/>\"\n",
    "        f\"/api/v1.0/&lt;start_date&gt; <em>(enter the start_date in the YYYY-MM-DD format)</em><br/>\"\n",
    "        f\"/api/v1.0/&lt;start_date&gt;/&lt;end_date&gt; <em>(enter the start_date and end_date in the YYYY-MM-DD format)</em><br/>\"\n",
    "    )\n",
    "\n",
    "#%%\n",
    "@app.route('/api/v1.0/precipitation')\n",
    "def prcp():\n",
    "    \n",
    "    conn = engine.connect()\n",
    "    \n",
    "    query = f'''\n",
    "        SELECT \n",
    "            date,\n",
    "            AVG(prcp) as avg_prcp\n",
    "        FROM\n",
    "            measurement\n",
    "        WHERE\n",
    "            date >= (SELECT DATE(MAX(date),'-1 year') FROM measurement)\n",
    "        GROUP BY\n",
    "            date\n",
    "        ORDER BY \n",
    "            date\n",
    "    '''\n",
    "\n",
    "    # Save the query results as a Pandas DataFrame and set the index to the date column\n",
    "    prcp_df = pd.read_sql(query, conn)\n",
    "    \n",
    "    # Convert the date column to date\n",
    "    prcp_df['date'] = pd.to_datetime(prcp_df['date'])\n",
    "        \n",
    "    # Sort the dataframe by date\n",
    "    prcp_df.sort_values('date')\n",
    "    \n",
    "    prcp_json = prcp_df.to_json(orient='records', date_format = 'iso')\n",
    "    \n",
    "    conn.close()\n",
    "    \n",
    "    return prcp_json\n",
    "\n",
    "\n",
    "@app.route('/api/v1.0/stations')\n",
    "def station():\n",
    "    conn = engine.connect()\n",
    "    \n",
    "    query = \"SELECT station FROM measurement\"\n",
    "    station_df = pd.read_sql(query, conn)\n",
    "    station_json = station_df.to_json(orient='records')\n",
    "    \n",
    "    conn.close()\n",
    "    \n",
    "    return station_json\n",
    "\n",
    "#%%\n",
    "@app.route('/api/v1.0/tobs')\n",
    "def temp():\n",
    "    conn = engine.connect()\n",
    "    \n",
    "    # Try not to hardcode the most active station. Instead look up the most active station.\n",
    "    query = \"SELECT date, tobs FROM measurement WHERE station = 'USC00519281'\"\n",
    "    tobs_df = pd.read_sql(query, conn)\n",
    "    tobs_json = tobs_df.to_json(orient = 'records', date_format='iso')\n",
    "\n",
    "    conn.close()\n",
    "\n",
    "    return tobs_json\n",
    "\n",
    "#%%\n",
    "@app.route('/api/v1.0/<start_date>')\n",
    "def start(start_date):\n",
    "    conn = engine.connect()\n",
    "    query  = f'''\n",
    "        SELECT\t\n",
    "            MIN(tobs),\n",
    "            MAX(tobs),\n",
    "            AVG(tobs)\n",
    "        FROM\t\n",
    "            measurement\n",
    "        WHERE\n",
    "            date >= '{start_date}'\n",
    "    '''\n",
    "    data_df = pd.read_sql(query, conn)\n",
    "    data_json = data_df.to_json(orient='records', date_format='iso')\n",
    "\n",
    "    conn.close()\n",
    "\n",
    "    return data_json \n",
    "#%%\n",
    "@app.route('/api/v1.0/<start_date>/<end_date>')\n",
    "def start_end(start_date, end_date):\n",
    "    conn = engine.connect()\n",
    "    \n",
    "    query = f'''\n",
    "        SELECT\t\n",
    "            MIN(tobs) AS min_tobs,\n",
    "            MAX(tobs) AS max_tobs,\n",
    "            AVG(tobs) AS avg_tobs\n",
    "        FROM\t\n",
    "            measurement\n",
    "        WHERE\n",
    "            date BETWEEN '{start_date}' AND '{end_date}'\n",
    "    '''         \n",
    "    data_df = pd.read_sql(query, conn)\n",
    "    data_json = data_df.to_json(orient='records', date_format='iso')\n",
    "    \n",
    "    conn.close()\n",
    "\n",
    "    return data_json \n",
    "\n",
    "#%%\n",
    "if __name__ == '__main__':\n",
    "    app.run(debug=True)    "
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
